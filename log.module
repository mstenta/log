<?php

/**
 * @file
 * Contains log.module..
 */

use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\log\Entity\LogInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function log_help($route_name, RouteMatchInterface $route_match) {
  $output = '';

  // Main module help for the log module.
  if ($route_name == 'help.page.log') {
    $output = '';
    $output .= '<h3>' . t('About') . '</h3>';
    $output .= '<p>' . t('Provides Log entity') . '</p>';
  }

  return $output;
}

/**
 * Implements hook_log_access().
 */
function log_log_access(LogInterface $log, $op, AccountInterface $account) {
  $type = $log->bundle();
  switch ($op) {
    case 'view':
      if ($account->hasPermission('view any ' . $type . ' log entities')) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('view own ' . $type . ' log entities') && ($account->id() == $log->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($log);
      }

    case 'update':
      if ($account->hasPermission('edit any ' . $type . ' log entities')) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('edit own ' . $type . ' log entities') && ($account->id() == $log->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($log);
      }

    case 'delete':
      if ($account->hasPermission('delete any ' . $type . ' log entities')) {
        return AccessResult::allowed()->cachePerPermissions();
      }
      else {
        return AccessResult::allowedIf($account->hasPermission('delete own ' . $type . ' log entities') && ($account->id() == $log->getOwnerId()))->cachePerPermissions()->cachePerUser()->addCacheableDependency($log);
      }

    default:
      // No opinion.
      return AccessResult::neutral();
  }
}

/**
 * Implements hook_log_create_access().
 */
function log_log_create_access(AccountInterface $account, array $context, $entity_bundle = NULL) {
  return AccessResult::allowedIfHasPermission($account, 'create ' . $entity_bundle . ' log entities')->cachePerPermissions();
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the theme form to use the admin theme on log editing.
 *
 * @see log_form_system_themes_admin_form_submit()
 */
function log_form_system_themes_admin_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $form['admin_theme']['log_use_admin_theme'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the administration theme when editing or creating log entity'),
    '#default_value' => \Drupal::configFactory()->getEditable('log.settings')->get('log_use_admin_theme'),
  ];
  $form['#submit'][] = 'log_form_system_themes_admin_form_submit';
}

/**
 * Form submission handler for system_themes_admin_form().
 *
 * @see log_form_system_themes_admin_form_alter()
 */
function log_form_system_themes_admin_form_submit($form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('log.settings')
    ->set('log_use_admin_theme', $form_state->getValue('log_use_admin_theme'))
    ->save();
  \Drupal::service('router.builder')->setRebuildNeeded();
}
